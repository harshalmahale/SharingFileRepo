Raw strings ----> Escape sequence shows 
Strings formatting------>print in curly braces
Escape sequence-------->\\
String indexing---------->shows position of string      print (name[2])
String Slicing------------->start and stop arg                 print(name[-1:0:1])
Step argument---------->jumps step by step               
String methods--------->title,lower,count
Strip method----------->remove space
Center method--------->left & rights char can print 
Loop
Function
If function is define is called parameter
If function is called is called argument

Split method -----> If we want two input in 1line 
List---->Data-structure to store values

Tuple----->Immutable DS

Why dictionary?
It is unordered collection of data in a key : value pair.
Because of limitation of lists, list are not enough to represent real data…

The keys have to be immutable and unique
The values can be immutable, mutable and duplicates

From keys ---------------->Assign values to all keys
Get method in dict ------> Use to check the keys are present or not eitherwise return None
Clear method -------> Use to clear the method of dict
Set----------------> Unorder collection of unique items
Flexible functions
*operator

*args
It accept number of argument as possible in parameter. And it convert data in tuple.

Kwargs (Keyword argument)
**kwargs(double star operator)
It prints key value pair in the form of dictionary

Lambda expression (anonymous function)
It is anonymous function which does not store in memory. 
A lambda function can take any number of arguments, but can only have one expression.
It is used with built in function, map, reduce, filter
We can used if and else condition on lambda

Enumerate

We used enumerate function with the for loop to track index as well as values position of our item in iterable

Function is also object in python.

Map function
It takes func as a arguments and iterables by which it can access the elements in that function. Map(func,*iterables)
Technically map object is an Iterator

Self in python- Its use the first parameter in method defination within the class. Its refers to the instance of the class on which the method is called.
Using self allows us to access the instance variables and methods of the class within its own methods. 
Without self, we would not be able to differentiate between instance variables and local variables.

Annotations and Decorators:-

They are features of python that allow for the modification and enhancement of code functionality.

Annotations are used to add metadata to function parameters and returns values.

def check_anno(name: str) -> str:
    return f"Hello,{name}"
print(check_anno("People"))


Decorators  are functions that modify the behavior of other functions .or classes and used to add functionality to  a function and modify its behavior or change its output


def deco(func):
    def inner():
        print("executing now")
        func()
        print("executed")
    return inner
@deco
def who_is_harsh():
    print("Harsh is cool boy")
# who_is_harsh = deco(who_is_harsh)
who_is_harsh()


_name --> Convention of private name
__name__  --> Dunder/magic methods

Dir(): - It is use to see all the objects of the class

Async def  expression defines a coroutine

The async def defines a coroutine expression that returns a coroutine object.

Asynchronous programming is a type of programming in which we can execute more than one task without blocking the Main task (function)

Coroutine: Coroutines are a general control structure whereby flow control is cooperatively passed between two different routines without returning

Using the with statement is better practice, it automatically closes the file even if the code encounters an exception.

with open(example1, "r") as file1:

# Write line to file
exmp2 = '/Example2.txt'
with open(exmp2, 'w') as writefile:
    writefile.write("This is line A")

# Read file

with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())



• .tell() - returns the current position in bytes
• .seek(offset,from) - changes the position by 'offset' bytes with respect to 'from'. From can take the value of 0,1,2 corresponding to beginning, relative to current position and end

Yield in Python:-

for multiple iterations you want to return multiple values you don't use return you use yield.

Generators and iterators are both ways of creating objects that can be iterated over, meaning that you can access their elements one by one using a loop or the next function. 

Iterator:-

An iterator is an object that implements the __iter__ and __next__ methods, which are used to return an iterator object and the next element in the sequence, respectively.


my_list = [1,2,3,4]
my_iter = iter(my_list)
print(next(my_iter))
print(next(my_iter))


A generator is a special kind of function that uses the yield keyword to return a value and pause the execution of the function until the next value is requested.


def my_gen(n):
    for i in range(1,n+1):
        yield i*i
        
my_generator = my_gen(4)
for num in my_generator:
    print(num)


Beneifits:

	1. They save memory by generating values on demand instead of storing them all at once
	2. Allow lazy evaluation
	3. Represent infinite sequences

Cons:
	1. Can only be iterated over once, unless you create a new object from them.
	2. do not support random access or indexing, which means that you cannot access a specific element
	3.  Slower than using lists or arrays for some operations, such as sorting or filtering.



Abstraction - To hide the Irrelevant data in order to reduce complexity.

Is it possible to call parent class without its instance creation?


Compile C++ Language

C++ Program (program.cpp):


// program.cpp
#include<iostream>
intmain()
{ 
 std::cout << "Hello, ";
 std::cout << "world!"
<< std::endl;
 return0;
 }
 
In C++, similar to C, the code is typically compiled into machine code before execution. When you run the compiled program, the entire program is executed at once.


$ g++ program.cpp -o program
$ ./program

Django Framework

Django is a web application framework written in python language

Python -m venv to activate the environment 

django - admin startproject projname      to start the project
Python manage.py runserver to run the file

Http://0.0.1.8001

http://amazon.in/product?id=123

domain + slug ? parameters

Based on: (MVT)

Model view template architecture
In views it has python functions
Views carry data from model and from template it carry html structure
Data driven database based web applications

Git token
 
Git add .
Git commit -m "commit message"
Git branch -M main
Git push -u origin main
{ % csrf _token  %}